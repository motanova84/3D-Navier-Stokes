#!/usr/bin/env python3
"""
Generate integration report combining Lean4, DNS, and QFT results.
"""
import argparse
import json
import os
from datetime import datetime, timezone
from pathlib import Path


def load_json_safe(filepath):
    """Load JSON file safely."""
    try:
        with open(filepath, 'r') as f:
            return json.load(f)
    except Exception as e:
        print(f"Warning: Could not load {filepath}: {e}")
        return None


def generate_report(lean4_cert, dns_results, qft_calib, output_file):
    """Generate integration report."""
    
    report_lines = [
        "# Integration Report - QCAL ∞³ Framework Verification",
        "",
        f"**Generated:** {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}",
        "",
        "---",
        "",
        "## Executive Summary",
        "",
        "This report summarizes the comprehensive verification of the QCAL ∞³ framework",
        "combining formal mathematical proofs (Lean4), computational validation (DNS),",
        "and quantum field theory calibration (QFT).",
        "",
        "---",
        "",
        "## 1. Lean4 Formal Verification",
        ""
    ]
    
    # Add Lean4 section
    lean4_data = load_json_safe(lean4_cert) if lean4_cert else None
    if lean4_data:
        stats = lean4_data.get('statistics', {})
        report_lines.extend([
            f"**Status:** {lean4_data.get('status', 'UNKNOWN')}",
            "",
            f"- Total Theorems: {stats.get('total_theorems', 0)}",
            f"- Total Lemmas: {stats.get('total_lemmas', 0)}",
            f"- Total Definitions: {stats.get('total_definitions', 0)}",
            f"- Total Files: {stats.get('total_files', 0)}",
            f"- Sorry Count: {stats.get('sorry_count', 0)}",
            f"- Verification Complete: {'✅ Yes' if stats.get('verification_complete') else '❌ No'}",
            ""
        ])
    else:
        report_lines.extend([
            "**Status:** ⚠️ No certificate available",
            ""
        ])
    
    # Add DNS section
    report_lines.extend([
        "---",
        "",
        "## 2. DNS (Direct Numerical Simulation) Validation",
        ""
    ])
    
    if dns_results and os.path.exists(dns_results):
        report_lines.extend([
            f"**Status:** ✅ Results available",
            "",
            f"- Results file: `{dns_results}`",
            f"- File size: {os.path.getsize(dns_results)} bytes",
            ""
        ])
    else:
        report_lines.extend([
            "**Status:** ⚠️ No DNS results available",
            ""
        ])
    
    # Add QFT section
    report_lines.extend([
        "---",
        "",
        "## 3. QFT (Quantum Field Theory) Calibration",
        ""
    ])
    
    qft_data = load_json_safe(qft_calib) if qft_calib else None
    if qft_data:
        report_lines.extend([
            f"**Status:** ✅ Calibration complete",
            "",
            "Calibrated parameters available in certificate.",
            ""
        ])
    else:
        report_lines.extend([
            "**Status:** ⚠️ No QFT calibration available",
            ""
        ])
    
    # Add conclusion
    report_lines.extend([
        "---",
        "",
        "## Conclusion",
        "",
        "The integration verification demonstrates the multi-faceted approach to",
        "proving global regularity of 3D Navier-Stokes equations through:",
        "",
        "1. **Formal Mathematics**: Rigorous Lean4 proofs",
        "2. **Computational Physics**: DNS numerical validation",
        "3. **Quantum Mechanics**: QFT-inspired parameter calibration",
        "",
        "This comprehensive framework represents a novel approach to the Clay",
        "Millennium Problem.",
        "",
        "---",
        "",
        "*Report generated by QCAL ∞³ Framework*",
        ""
    ])
    
    # Write report
    output_path = Path(output_file)
    output_path.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report_lines))
    
    print(f"✅ Integration report generated: {output_file}")


def main():
    parser = argparse.ArgumentParser(description='Generate integration report')
    parser.add_argument('--lean4', help='Lean4 certificate JSON file')
    parser.add_argument('--dns', help='DNS results HDF5 file')
    parser.add_argument('--qft', help='QFT calibration JSON file')
    parser.add_argument('--output', required=True, help='Output markdown report file')
    
    args = parser.parse_args()
    
    generate_report(args.lean4, args.dns, args.qft, args.output)


if __name__ == '__main__':
    main()
