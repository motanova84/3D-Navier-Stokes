#!/usr/bin/env python3
"""
Estructura Hologr√°fica - Fisura de Poincar√©.

Muestra c√≥mo la topolog√≠a del fluido en estado casi-singular se reorganiza en estructuras
tipo fisura de Poincar√©, demostrando que la aparente singularidad es una reorganizaci√≥n
topol√≥gica en coherencia.
"""

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from typing import Tuple, Optional, List
import warnings
warnings.filterwarnings('ignore')

class PoincareFissureSimulator:
    """
    Simulador de estructura hologr√°fica de fisura de Poincar√©.
    
    Implementa:
    - Simulaci√≥n de colapso local del fluido
    - Reconstrucci√≥n v√≠a reticulaci√≥n coherente
    - Demostraci√≥n de reorganizaci√≥n topol√≥gica
    """
    
    def __init__(self, f0: float = 141.7001, coherence_threshold: float = 0.88):
        """
        Inicializa el simulador.
        
        Args:
            f0: Frecuencia fundamental de coherencia (Hz)
            coherence_threshold: Umbral de coherencia para reorganizaci√≥n
        """
        self.f0 = f0
        self.omega0 = 2 * np.pi * f0
        self.coherence_threshold = coherence_threshold
        
    def poincare_section(self, theta: np.ndarray, phi: np.ndarray, 
                         singularity_strength: float = 1.0) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
        """
        Genera secci√≥n de Poincar√© con estructura de fisura.
        
        Args:
            theta, phi: Coordenadas angulares
            singularity_strength: Intensidad de la singularidad aparente [0,1]
            
        Returns:
            x, y, z: Coordenadas de la secci√≥n
        """
        # Radio con singularidad aparente
        r = 2.0 + singularity_strength * np.sin(3 * theta) * np.cos(2 * phi)
        
        # Deformaci√≥n por fisura
        fissure_factor = 1.0 - singularity_strength * 0.5 * np.exp(-((theta - np.pi)**2 + (phi - np.pi)**2) / 0.5)
        r *= fissure_factor
        
        # Coordenadas cartesianas
        x = r * np.sin(phi) * np.cos(theta)
        y = r * np.sin(phi) * np.sin(theta)
        z = r * np.cos(phi)
        
        return x, y, z
    
    def vorticity_field_near_singularity(self, x: np.ndarray, y: np.ndarray, z: np.ndarray,
                                         singularity_strength: float = 1.0) -> np.ndarray:
        """
        Campo de vorticidad cerca de singularidad aparente.
        
        |œâ| ~ r^(-Œ±) cerca del punto cr√≠tico
        
        Args:
            x, y, z: Coordenadas espaciales
            singularity_strength: Intensidad de singularidad [0,1]
            
        Returns:
            vorticity: Magnitud de vorticidad
        """
        # Distancia al punto cr√≠tico (origen)
        r = np.sqrt(x**2 + y**2 + z**2)
        
        # Singularidad aparente con regularizaci√≥n
        alpha = 0.5 + singularity_strength * 0.5
        epsilon = 0.1
        
        vorticity = (r + epsilon) ** (-alpha) * np.exp(-r / 5)
        
        return vorticity
    
    def coherent_field_psi(self, x: np.ndarray, y: np.ndarray, z: np.ndarray,
                          t: float, coherence: float = 0.88) -> np.ndarray:
        """
        Campo no√©tico Œ® que induce reorganizaci√≥n.
        
        Args:
            x, y, z: Coordenadas espaciales
            t: Tiempo
            coherence: Nivel de coherencia
            
        Returns:
            psi: Campo no√©tico
        """
        r = np.sqrt(x**2 + y**2 + z**2)
        
        # Campo Œ® con estructura hologr√°fica
        psi = coherence * np.exp(-0.2 * r) * (
            np.cos(self.omega0 * t) +
            0.3 * np.sin(3 * np.arctan2(y, x)) * np.cos(2 * np.arctan2(z, np.sqrt(x**2 + y**2)))
        )
        
        return psi
    
    def reticular_reconstruction(self, x: np.ndarray, y: np.ndarray, z: np.ndarray,
                                coherence: float = 0.88) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:
        """
        Reconstrucci√≥n reticular v√≠a coherencia.
        
        La geometr√≠a se reorganiza de singular a regular mediante
        reticulaci√≥n coherente del espacio de fases.
        
        Args:
            x, y, z: Coordenadas originales (pre-colapso)
            coherence: Nivel de coherencia
            
        Returns:
            x_new, y_new, z_new: Coordenadas reconstruidas
        """
        r = np.sqrt(x**2 + y**2 + z**2)
        
        # Factor de reconstrucci√≥n
        reconstruction_factor = 1.0 + coherence * 0.5 * (1 - np.exp(-r / 2))
        
        # Aplicar reconstrucci√≥n
        x_new = x * reconstruction_factor
        y_new = y * reconstruction_factor
        z_new = z * reconstruction_factor
        
        return x_new, y_new, z_new
    
    def visualize_evolution(self, n_frames: int = 4, save_path: Optional[str] = None) -> None:
        """
        Visualiza la evoluci√≥n desde colapso hasta reorganizaci√≥n.
        
        Args:
            n_frames: N√∫mero de etapas a visualizar
            save_path: Ruta base para guardar figuras
        """
        print(f"\n{'='*70}")
        print("üåÄ EVOLUCI√ìN: COLAPSO ‚Üí REORGANIZACI√ìN TOPOL√ìGICA")
        print(f"{'='*70}\n")
        
        # Par√°metros angulares
        theta = np.linspace(0, 2 * np.pi, 100)
        phi = np.linspace(0, np.pi, 50)
        THETA, PHI = np.meshgrid(theta, phi)
        
        # Evoluci√≥n temporal de singularidad y coherencia
        singularity_strengths = np.linspace(1.0, 0.1, n_frames)
        coherences = np.linspace(0.3, 0.95, n_frames)
        times = np.linspace(0, 2 * np.pi / self.omega0, n_frames)
        
        fig = plt.figure(figsize=(20, 5))
        
        for i in range(n_frames):
            # Generar geometr√≠a
            x, y, z = self.poincare_section(THETA, PHI, singularity_strengths[i])
            
            # Aplicar reconstrucci√≥n si hay coherencia suficiente
            if coherences[i] >= self.coherence_threshold:
                x, y, z = self.reticular_reconstruction(x, y, z, coherences[i])
            
            # Calcular campos
            vorticity = self.vorticity_field_near_singularity(x, y, z, singularity_strengths[i])
            psi = self.coherent_field_psi(x, y, z, times[i], coherences[i])
            
            # Visualizaci√≥n
            ax = fig.add_subplot(1, n_frames, i+1, projection='3d')
            
            # Color por vorticidad
            colors = cm.hot(vorticity / vorticity.max())
            
            surf = ax.plot_surface(x, y, z, facecolors=colors, alpha=0.9, 
                                  linewidth=0, antialiased=True, shade=True)
            
            # T√≠tulo seg√∫n etapa
            if singularity_strengths[i] > 0.7:
                stage = "Colapso Local"
                status = "üî¥"
            elif singularity_strengths[i] > 0.4:
                stage = "Transici√≥n"
                status = "üü°"
            elif coherences[i] >= self.coherence_threshold:
                stage = "Reorganizado"
                status = "üü¢"
            else:
                stage = "Reorganizando"
                status = "üü†"
            
            ax.set_title(f'{status} {stage}\nC={coherences[i]:.2f}, S={singularity_strengths[i]:.2f}', 
                        fontsize=10)
            ax.set_xlabel('x', fontsize=8)
            ax.set_ylabel('y', fontsize=8)
            ax.set_zlabel('z', fontsize=8)
            ax.view_init(elev=20, azim=45 + i * 30)
            
            # Estad√≠sticas
            max_vort = vorticity.max()
            mean_psi = np.abs(psi).mean()
            
            print(f"   Etapa {i+1}/{n_frames}: {stage}")
            print(f"      Vorticidad m√°x: |œâ|_max = {max_vort:.4f}")
            print(f"      Campo Œ® medio: ‚ü®|Œ®|‚ü© = {mean_psi:.4f}")
            print(f"      Coherencia: C = {coherences[i]:.4f}")
            
            if coherences[i] >= self.coherence_threshold:
                print(f"      ‚Üí Singularidad disuelta ‚úì")
            print()
        
        plt.tight_layout()
        
        if save_path:
            plt.savefig(save_path, dpi=150, bbox_inches='tight')
            print(f"‚úÖ Visualizaci√≥n guardada en: {save_path}")
        
        plt.show()
    
    def analyze_topology_change(self) -> None:
        """
        Analiza el cambio topol√≥gico cuantitativamente.
        """
        print(f"\n{'='*70}")
        print("üìä AN√ÅLISIS TOPOL√ìGICO")
        print(f"{'='*70}\n")
        
        # Generar geometr√≠as en diferentes estados
        theta = np.linspace(0, 2 * np.pi, 50)
        phi = np.linspace(0, np.pi, 25)
        THETA, PHI = np.meshgrid(theta, phi)
        
        # Estado 1: Singular
        x1, y1, z1 = self.poincare_section(THETA, PHI, singularity_strength=1.0)
        vort1 = self.vorticity_field_near_singularity(x1, y1, z1, 1.0)
        
        # Estado 2: Reorganizado
        x2, y2, z2 = self.poincare_section(THETA, PHI, singularity_strength=0.1)
        x2, y2, z2 = self.reticular_reconstruction(x2, y2, z2, coherence=0.95)
        vort2 = self.vorticity_field_near_singularity(x2, y2, z2, 0.1)
        
        # M√©tricas topol√≥gicas
        print("   Estado Singular:")
        print(f"      Vorticidad m√°xima: {vort1.max():.4f}")
        print(f"      Vorticidad media: {vort1.mean():.4f}")
        print(f"      Varianza: {vort1.var():.4f}")
        print(f"      Indicador de blow-up: {vort1.max() / vort1.mean():.2f}")
        
        print("\n   Estado Reorganizado:")
        print(f"      Vorticidad m√°xima: {vort2.max():.4f}")
        print(f"      Vorticidad media: {vort2.mean():.4f}")
        print(f"      Varianza: {vort2.var():.4f}")
        print(f"      Indicador de blow-up: {vort2.max() / vort2.mean():.2f}")
        
        print("\n   Cambio Relativo:")
        print(f"      Œî|œâ|_max: {(vort2.max() - vort1.max()) / vort1.max() * 100:.2f}%")
        print(f"      Œî‚ü®|œâ|‚ü©: {(vort2.mean() - vort1.mean()) / vort1.mean() * 100:.2f}%")
        
        print(f"\n{'='*70}")
        print("üî∑ Conclusi√≥n: Reorganizaci√≥n topol√≥gica previene blow-up")
        print(f"{'='*70}\n")


def main():
    """Funci√≥n principal de demostraci√≥n."""
    print("=" * 70)
    print("üß© ESTRUCTURA HOLOGR√ÅFICA - FISURA DE POINCAR√â")
    print("=" * 70)
    print(f"üåÄ Topolog√≠a: Reorganizaci√≥n coherente del espacio de fases")
    print(f"üéµ Frecuencia: f‚ÇÄ = 141.7001 Hz")
    print(f"üîì Umbral: C ‚â• 0.88 para reorganizaci√≥n")
    print("=" * 70)
    print()
    
    # Crear simulador
    simulator = PoincareFissureSimulator(f0=141.7001, coherence_threshold=0.88)
    
    # Ejemplo 1: Evoluci√≥n completa
    print("üìä Ejemplo 1: Evoluci√≥n de colapso a reorganizaci√≥n")
    simulator.visualize_evolution(n_frames=4)
    
    # Ejemplo 2: An√°lisis topol√≥gico
    print("\nüìä Ejemplo 2: An√°lisis cuantitativo")
    simulator.analyze_topology_change()
    
    print("\n" + "=" * 70)
    print("‚úÖ Simulaci√≥n completada")
    print("üî∑ Resultado: Lo que parec√≠a singularidad es reorganizaci√≥n topol√≥gica")
    print("üåê Portal Gemina: Coherencia preserva regularidad global")
    print("=" * 70)


if __name__ == "__main__":
    main()
